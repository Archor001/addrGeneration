<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hust.addrgeneration.dao.UserMapper">
    <insert id="register">
        insert into user (nid, userID, phoneNumber, password, username, status)
        values (#{nid}, #{userID}, #{phoneNumber}, #{password}, #{username}, #{status})
    </insert>

    <select id="queryRegisterInfo" parameterType="String" resultType="com.hust.addrgeneration.beans.User">
        select userID, phoneNumber, password, username, nid, status from user where nid = #{nid}
    </select>

    <select id="queryPhoneNumber" parameterType="String" resultType="com.hust.addrgeneration.beans.User">
        select * from user where phoneNumber = #{phoneNumber}
    </select>

    <update id="updateUser" parameterType="com.hust.addrgeneration.beans.User">
        update aid_trunc <set>status = 3</set> where phoneNumber = #{phoneNumber};
        update user <set>nid = #{nid}, password = #{password}, userID = #{userID}, username = #{username}, status = #{status}</set> where phoneNumber = #{phoneNumber};
    </update>

    <update id="deleteUser" parameterType="String">
        update user <set>status = 3</set> where phoneNumber = #{phoneNumber};
        update aid_trunc <set>status = 3</set> where phoneNumber = #{phoneNumber};
    </update>

    <select id="getAllRegisteredUsers" resultType="com.hust.addrgeneration.beans.User">
        select * from user
    </select>

    <insert id="updateAID" parameterType="String">
        insert into aid_info (aidnth, aid, prefix)
        values (#{aidnth}, #{aid}, #{prefix})
    </insert>

    <select id="queryAIDnTH" parameterType="String" resultType="String">
        select aidnth from aid_info where aid = #{aid}
    </select>

    <select id="queryPrefix" parameterType="String" resultType="String">
        select prefix from aid_info where aidnth = #{aidnth}
    </select>

    <insert id="updateAIDTrunc">
        insert into aid_trunc (address, aid, visibleAID, hiddenAID, timeDifference, phoneNumber, registerTime, prefix, status)
        values (#{address}, #{aid}, #{visibleAID}, #{hiddenAID}, #{timeDifference}, #{phoneNumber}, #{registerTime}, #{prefix}, #{status})
    </insert>

    <update id="suspendAIDTrunc">
        update aid_trunc <set>status = 2</set> where status = 1;
    </update>

    <select id="queryAIDTruncHiddenAID" resultType="String">
        select hiddenAID from aid_trunc where visibleAID = #{visibleAID} and timeDifference = #{timeDifference}
    </select>

    <select id="queryAIDTruncResult" resultType="QueryAIDTrunc">
        select timeDifference,status from aid_trunc where aid = #{aid}
    </select>

    <select id="queryAIDTruncAddress" parameterType="String" resultType="com.hust.addrgeneration.beans.Address">
        select address,registerTime from aid_trunc where phoneNumber = #{phoneNumber}
    </select>

    <delete id="deleteAIDTruncAddress" parameterType="String">
        delete from aid_trunc where address = #{address}
    </delete>

    <select id="getIdeaKey" parameterType="String" resultType="String">
        select ideakey from key_info where addrGenIP = #{addrGenIP} and timehash = #{timeHash}
    </select>

    <insert id="updateKey" parameterType="String">
        insert into key_info (addrGenIP, ideakey, timehash)
        values (#{addrGenIP}, #{ideaKey}, #{timeHash})
    </insert>

    <select id="getUsersByFilter" resultType="com.hust.addrgeneration.beans.User">
        select * from user where username LIKE CONCAT('%',#{content},'%') OR phoneNumber LIKE CONCAT('%',#{content},'%') LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getUserCountByFilter" parameterType="String" resultType="int">
        select COUNT(*) from user where username LIKE CONCAT('%',#{content},'%') OR phoneNumber LIKE CONCAT('%',#{content},'%')
    </select>

    <select id="getAddressesByFilter" resultType="com.hust.addrgeneration.beans.Address">
        select user.username, user.phoneNumber, user.nid, aid_trunc.status, aid_trunc.address, aid_trunc.registerTime from aid_trunc left join user on user.phoneNumber = aid_trunc.phoneNumber
        where user.username LIKE CONCAT('%',#{content},'%') OR user.phoneNumber LIKE CONCAT('%',#{content},'%') LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="getAddressCountByFilter" parameterType="String" resultType="int">
        select COUNT(*) from user right join aid_trunc on user.phoneNumber = aid_trunc.phoneNumber
        where user.username LIKE CONCAT('%',#{content},'%') OR user.phoneNumber LIKE CONCAT('%',#{content},'%')
    </select>
</mapper>